// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  username      String
  email         String
  password      String
  role          String
  referral      String?
  referred      String?
  points        Int?
  pointsExpired DateTime?
  coupon        Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Event         Event[]
  Transaction   Transaction[]

  Review      Review[]
  UserVoucher UserVoucher[]
  Voucher     Voucher[]

  @@map("users")
}

model Event {
  id          Int    @id @default(autoincrement())
  title       String @unique
  description String @db.LongText()

  booked Int @default(0)

  category String
  content  String @db.LongText()
  venue    String @default("")
  city     String @default("")

  price Int? @default(0)

  ticketLimit Int           @default(0)
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  thumbnail   String
  startDate   DateTime      @db.DateTime()
  endDate     DateTime      @db.DateTime()
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]

  Review  Review[]
  Voucher Voucher[]

  @@map("events")
}

model Transaction {
  id         Int      @id @default(autoincrement())
  quantity   Int
  totalPrice Int
  expiresAt  DateTime
  userId     Int
  status     String   @default("PENDING")
  user       User     @relation(fields: [userId], references: [id])
  eventId    Int
  event      Event    @relation(fields: [eventId], references: [id])
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt

  userVoucher   UserVoucher? @relation(fields: [userVoucherId], references: [id])
  userVoucherId Int?

  @@map("transactions")
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  userId    Int
  eventId   Int
  // rating    Int?
  comment   String
  createdAt DateTime @default(now())

  @@map("reviews")
}

model UserVoucher {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  Transaction Transaction[]
  voucher     Voucher       @relation(fields: [voucherId], references: [id])
  voucherId   Int

  @@map("userVouchers")
}

model Voucher {
  id          Int      @id @default(autoincrement())
  name        String
  amount      Int
  limit       Int
  expiredDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id])
  event       Event         @relation(fields: [eventId], references: [id])
  userId      Int
  eventId     Int
  UserVoucher UserVoucher[]
}
